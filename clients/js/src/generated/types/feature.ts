/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  struct,
  tuple,
} from '@metaplex-foundation/umi/serializers';
import {
  AdditionalOutputsFeature,
  AdditionalOutputsFeatureArgs,
  FeesFeature,
  FeesFeatureArgs,
  MaxSupplyFeature,
  MaxSupplyFeatureArgs,
  SolPaymentFeature,
  SolPaymentFeatureArgs,
  TransferInputsFeature,
  TransferInputsFeatureArgs,
  WisdomFeature,
  WisdomFeatureArgs,
  getAdditionalOutputsFeatureSerializer,
  getFeesFeatureSerializer,
  getMaxSupplyFeatureSerializer,
  getSolPaymentFeatureSerializer,
  getTransferInputsFeatureSerializer,
  getWisdomFeatureSerializer,
} from '../../hooked';

export type Feature =
  | { __kind: 'Fees'; fields: [FeesFeature] }
  | { __kind: 'AdditionalOutputs'; fields: [AdditionalOutputsFeature] }
  | { __kind: 'TransferInputs'; fields: [TransferInputsFeature] }
  | { __kind: 'MaxSupply'; fields: [MaxSupplyFeature] }
  | { __kind: 'SolPayment'; fields: [SolPaymentFeature] }
  | { __kind: 'Wisdom'; fields: [WisdomFeature] };

export type FeatureArgs =
  | { __kind: 'Fees'; fields: [FeesFeatureArgs] }
  | { __kind: 'AdditionalOutputs'; fields: [AdditionalOutputsFeatureArgs] }
  | { __kind: 'TransferInputs'; fields: [TransferInputsFeatureArgs] }
  | { __kind: 'MaxSupply'; fields: [MaxSupplyFeatureArgs] }
  | { __kind: 'SolPayment'; fields: [SolPaymentFeatureArgs] }
  | { __kind: 'Wisdom'; fields: [WisdomFeatureArgs] };

/** @deprecated Use `getFeatureSerializer()` without any argument instead. */
export function getFeatureSerializer(
  _context: object
): Serializer<FeatureArgs, Feature>;
export function getFeatureSerializer(): Serializer<FeatureArgs, Feature>;
export function getFeatureSerializer(
  _context: object = {}
): Serializer<FeatureArgs, Feature> {
  return dataEnum<Feature>(
    [
      [
        'Fees',
        struct<GetDataEnumKindContent<Feature, 'Fees'>>([
          ['fields', tuple([getFeesFeatureSerializer()])],
        ]),
      ],
      [
        'AdditionalOutputs',
        struct<GetDataEnumKindContent<Feature, 'AdditionalOutputs'>>([
          ['fields', tuple([getAdditionalOutputsFeatureSerializer()])],
        ]),
      ],
      [
        'TransferInputs',
        struct<GetDataEnumKindContent<Feature, 'TransferInputs'>>([
          ['fields', tuple([getTransferInputsFeatureSerializer()])],
        ]),
      ],
      [
        'MaxSupply',
        struct<GetDataEnumKindContent<Feature, 'MaxSupply'>>([
          ['fields', tuple([getMaxSupplyFeatureSerializer()])],
        ]),
      ],
      [
        'SolPayment',
        struct<GetDataEnumKindContent<Feature, 'SolPayment'>>([
          ['fields', tuple([getSolPaymentFeatureSerializer()])],
        ]),
      ],
      [
        'Wisdom',
        struct<GetDataEnumKindContent<Feature, 'Wisdom'>>([
          ['fields', tuple([getWisdomFeatureSerializer()])],
        ]),
      ],
    ],
    { description: 'Feature' }
  ) as Serializer<FeatureArgs, Feature>;
}

// Data Enum Helpers.
export function feature(
  kind: 'Fees',
  data: GetDataEnumKindContent<FeatureArgs, 'Fees'>['fields']
): GetDataEnumKind<FeatureArgs, 'Fees'>;
export function feature(
  kind: 'AdditionalOutputs',
  data: GetDataEnumKindContent<FeatureArgs, 'AdditionalOutputs'>['fields']
): GetDataEnumKind<FeatureArgs, 'AdditionalOutputs'>;
export function feature(
  kind: 'TransferInputs',
  data: GetDataEnumKindContent<FeatureArgs, 'TransferInputs'>['fields']
): GetDataEnumKind<FeatureArgs, 'TransferInputs'>;
export function feature(
  kind: 'MaxSupply',
  data: GetDataEnumKindContent<FeatureArgs, 'MaxSupply'>['fields']
): GetDataEnumKind<FeatureArgs, 'MaxSupply'>;
export function feature(
  kind: 'SolPayment',
  data: GetDataEnumKindContent<FeatureArgs, 'SolPayment'>['fields']
): GetDataEnumKind<FeatureArgs, 'SolPayment'>;
export function feature(
  kind: 'Wisdom',
  data: GetDataEnumKindContent<FeatureArgs, 'Wisdom'>['fields']
): GetDataEnumKind<FeatureArgs, 'Wisdom'>;
export function feature<K extends FeatureArgs['__kind']>(
  kind: K,
  data?: any
): Extract<FeatureArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isFeature<K extends Feature['__kind']>(
  kind: K,
  value: Feature
): value is Feature & { __kind: K } {
  return value.__kind === kind;
}
