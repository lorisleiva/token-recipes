/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { addAccountMeta, addObjectProperty } from '../shared';

// Accounts.
export type SetFeesInstructionAccounts = {
  /** The address of the recipe account */
  recipe: PublicKey | Pda;
  /** The authority of the recipe account */
  authority?: Signer;
};

// Data.
export type SetFeesInstructionData = { discriminator: number; fees: bigint };

export type SetFeesInstructionDataArgs = { fees: number | bigint };

/** @deprecated Use `getSetFeesInstructionDataSerializer()` without any argument instead. */
export function getSetFeesInstructionDataSerializer(
  _context: object
): Serializer<SetFeesInstructionDataArgs, SetFeesInstructionData>;
export function getSetFeesInstructionDataSerializer(): Serializer<
  SetFeesInstructionDataArgs,
  SetFeesInstructionData
>;
export function getSetFeesInstructionDataSerializer(
  _context: object = {}
): Serializer<SetFeesInstructionDataArgs, SetFeesInstructionData> {
  return mapSerializer<SetFeesInstructionDataArgs, any, SetFeesInstructionData>(
    struct<SetFeesInstructionData>(
      [
        ['discriminator', u8()],
        ['fees', u64()],
      ],
      { description: 'SetFeesInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 9 })
  ) as Serializer<SetFeesInstructionDataArgs, SetFeesInstructionData>;
}

// Args.
export type SetFeesInstructionArgs = SetFeesInstructionDataArgs;

// Instruction.
export function setFees(
  context: Pick<Context, 'programs' | 'identity'>,
  input: SetFeesInstructionAccounts & SetFeesInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'tokenRecipes',
    '6EgVKvZu2V6cpZzarvDHuyeJwa1NB2ujj8hXY98pQpLE'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    recipe: [input.recipe, true] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'authority',
    input.authority
      ? ([input.authority, false] as const)
      : ([context.identity, false] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.recipe, false);
  addAccountMeta(keys, signers, resolvedAccounts.authority, false);

  // Data.
  const data = getSetFeesInstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
