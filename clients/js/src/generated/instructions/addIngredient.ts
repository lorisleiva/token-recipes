/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  none,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  option,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { addAccountMeta, addObjectProperty } from '../shared';
import {
  IngredientType,
  IngredientTypeArgs,
  getIngredientTypeSerializer,
} from '../types';

// Accounts.
export type AddIngredientInstructionAccounts = {
  /** The address of the recipe account */
  recipe: PublicKey | Pda;
  /** The mint account of the ingredient */
  mint: PublicKey | Pda;
  /** The authority of the recipe account and the mint authority of the ingredient if it's an output ingredient */
  authority?: Signer;
  /** The account paying for the storage fees */
  payer?: Signer;
  /** The system program */
  systemProgram?: PublicKey | Pda;
};

// Data.
export type AddIngredientInstructionData = {
  discriminator: number;
  amount: bigint;
  ingredientType: IngredientType;
  maxSupply: Option<bigint>;
};

export type AddIngredientInstructionDataArgs = {
  amount?: number | bigint;
  ingredientType: IngredientTypeArgs;
  maxSupply?: OptionOrNullable<number | bigint>;
};

/** @deprecated Use `getAddIngredientInstructionDataSerializer()` without any argument instead. */
export function getAddIngredientInstructionDataSerializer(
  _context: object
): Serializer<AddIngredientInstructionDataArgs, AddIngredientInstructionData>;
export function getAddIngredientInstructionDataSerializer(): Serializer<
  AddIngredientInstructionDataArgs,
  AddIngredientInstructionData
>;
export function getAddIngredientInstructionDataSerializer(
  _context: object = {}
): Serializer<AddIngredientInstructionDataArgs, AddIngredientInstructionData> {
  return mapSerializer<
    AddIngredientInstructionDataArgs,
    any,
    AddIngredientInstructionData
  >(
    struct<AddIngredientInstructionData>(
      [
        ['discriminator', u8()],
        ['amount', u64()],
        ['ingredientType', getIngredientTypeSerializer()],
        ['maxSupply', option(u64())],
      ],
      { description: 'AddIngredientInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: 1,
      amount: value.amount ?? 1,
      maxSupply: value.maxSupply ?? none(),
    })
  ) as Serializer<
    AddIngredientInstructionDataArgs,
    AddIngredientInstructionData
  >;
}

// Args.
export type AddIngredientInstructionArgs = AddIngredientInstructionDataArgs;

// Instruction.
export function addIngredient(
  context: Pick<Context, 'programs' | 'identity' | 'payer'>,
  input: AddIngredientInstructionAccounts & AddIngredientInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'tokenRecipes',
    '6EgVKvZu2V6cpZzarvDHuyeJwa1NB2ujj8hXY98pQpLE'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    recipe: [input.recipe, true] as const,
    mint: [input.mint, true] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'authority',
    input.authority
      ? ([input.authority, false] as const)
      : ([context.identity, false] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'payer',
    input.payer
      ? ([input.payer, true] as const)
      : ([context.payer, true] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.recipe, false);
  addAccountMeta(keys, signers, resolvedAccounts.mint, false);
  addAccountMeta(keys, signers, resolvedAccounts.authority, false);
  addAccountMeta(keys, signers, resolvedAccounts.payer, false);
  addAccountMeta(keys, signers, resolvedAccounts.systemProgram, false);

  // Data.
  const data =
    getAddIngredientInstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
