/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { addAccountMeta, addObjectProperty } from '../shared';

// Accounts.
export type ActivateRecipeInstructionAccounts = {
  /** The address of the recipe account */
  recipe: PublicKey | Pda;
  /** The authority of the recipe account */
  authority?: Signer;
};

// Data.
export type ActivateRecipeInstructionData = { discriminator: number };

export type ActivateRecipeInstructionDataArgs = {};

/** @deprecated Use `getActivateRecipeInstructionDataSerializer()` without any argument instead. */
export function getActivateRecipeInstructionDataSerializer(
  _context: object
): Serializer<ActivateRecipeInstructionDataArgs, ActivateRecipeInstructionData>;
export function getActivateRecipeInstructionDataSerializer(): Serializer<
  ActivateRecipeInstructionDataArgs,
  ActivateRecipeInstructionData
>;
export function getActivateRecipeInstructionDataSerializer(
  _context: object = {}
): Serializer<
  ActivateRecipeInstructionDataArgs,
  ActivateRecipeInstructionData
> {
  return mapSerializer<
    ActivateRecipeInstructionDataArgs,
    any,
    ActivateRecipeInstructionData
  >(
    struct<ActivateRecipeInstructionData>([['discriminator', u8()]], {
      description: 'ActivateRecipeInstructionData',
    }),
    (value) => ({ ...value, discriminator: 3 })
  ) as Serializer<
    ActivateRecipeInstructionDataArgs,
    ActivateRecipeInstructionData
  >;
}

// Instruction.
export function activateRecipe(
  context: Pick<Context, 'programs' | 'identity'>,
  input: ActivateRecipeInstructionAccounts
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'tokenRecipes',
    'C7zZZJpLzAehgidrbwdpBwN6RZCJo98qb55Zjep1a28T'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    recipe: [input.recipe, true] as const,
  };
  addObjectProperty(
    resolvedAccounts,
    'authority',
    input.authority
      ? ([input.authority, false] as const)
      : ([context.identity, false] as const)
  );

  addAccountMeta(keys, signers, resolvedAccounts.recipe, false);
  addAccountMeta(keys, signers, resolvedAccounts.authority, false);

  // Data.
  const data = getActivateRecipeInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
