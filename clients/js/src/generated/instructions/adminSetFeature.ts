/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { addAccountMeta, addObjectProperty } from '../shared';
import { Feature, FeatureArgs, getFeatureSerializer } from '../types';

// Accounts.
export type AdminSetFeatureInstructionAccounts = {
  /** The program as a signer */
  programId: Signer;
  /** The feature PDA */
  featurePda: PublicKey | Pda;
  /** The account that pays for the storage fees */
  payer?: Signer;
  /** The system program */
  systemProgram?: PublicKey | Pda;
};

// Data.
export type AdminSetFeatureInstructionData = {
  discriminator: number;
  feature: Feature;
};

export type AdminSetFeatureInstructionDataArgs = { feature: FeatureArgs };

/** @deprecated Use `getAdminSetFeatureInstructionDataSerializer()` without any argument instead. */
export function getAdminSetFeatureInstructionDataSerializer(
  _context: object
): Serializer<
  AdminSetFeatureInstructionDataArgs,
  AdminSetFeatureInstructionData
>;
export function getAdminSetFeatureInstructionDataSerializer(): Serializer<
  AdminSetFeatureInstructionDataArgs,
  AdminSetFeatureInstructionData
>;
export function getAdminSetFeatureInstructionDataSerializer(
  _context: object = {}
): Serializer<
  AdminSetFeatureInstructionDataArgs,
  AdminSetFeatureInstructionData
> {
  return mapSerializer<
    AdminSetFeatureInstructionDataArgs,
    any,
    AdminSetFeatureInstructionData
  >(
    struct<AdminSetFeatureInstructionData>(
      [
        ['discriminator', u8()],
        ['feature', getFeatureSerializer()],
      ],
      { description: 'AdminSetFeatureInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 7 })
  ) as Serializer<
    AdminSetFeatureInstructionDataArgs,
    AdminSetFeatureInstructionData
  >;
}

// Args.
export type AdminSetFeatureInstructionArgs = AdminSetFeatureInstructionDataArgs;

// Instruction.
export function adminSetFeature(
  context: Pick<Context, 'programs' | 'payer'>,
  input: AdminSetFeatureInstructionAccounts & AdminSetFeatureInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'tokenRecipes',
    'C7zZZJpLzAehgidrbwdpBwN6RZCJo98qb55Zjep1a28T'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    programId: [input.programId, false] as const,
    featurePda: [input.featurePda, true] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'payer',
    input.payer
      ? ([input.payer, true] as const)
      : ([context.payer, true] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.programId, false);
  addAccountMeta(keys, signers, resolvedAccounts.featurePda, false);
  addAccountMeta(keys, signers, resolvedAccounts.payer, false);
  addAccountMeta(keys, signers, resolvedAccounts.systemProgram, false);

  // Data.
  const data =
    getAdminSetFeatureInstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
