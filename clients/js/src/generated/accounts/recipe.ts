/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
} from '@metaplex-foundation/umi/serializers';
import {
  FeatureLevels,
  FeatureLevelsArgs,
  IngredientInput,
  IngredientInputArgs,
  IngredientOutput,
  IngredientOutputArgs,
  Key,
  KeyArgs,
  RecipeStatus,
  RecipeStatusArgs,
  getFeatureLevelsSerializer,
  getIngredientInputSerializer,
  getIngredientOutputSerializer,
  getKeySerializer,
  getRecipeStatusSerializer,
} from '../types';

export type Recipe = Account<RecipeAccountData>;

export type RecipeAccountData = {
  key: Key;
  authority: PublicKey;
  status: RecipeStatus;
  totalCrafts: bigint;
  totalCraftsWithQuantity: bigint;
  fees: bigint;
  accumulatedAdminFees: bigint;
  accumulatedShards: bigint;
  accumulatedExperience: bigint;
  featureLevels: FeatureLevels;
  inputs: Array<IngredientInput>;
  outputs: Array<IngredientOutput>;
};

export type RecipeAccountDataArgs = {
  authority: PublicKey;
  status: RecipeStatusArgs;
  totalCrafts: number | bigint;
  totalCraftsWithQuantity: number | bigint;
  fees: number | bigint;
  accumulatedAdminFees: number | bigint;
  accumulatedShards: number | bigint;
  accumulatedExperience: number | bigint;
  featureLevels: FeatureLevelsArgs;
  inputs: Array<IngredientInputArgs>;
  outputs: Array<IngredientOutputArgs>;
};

/** @deprecated Use `getRecipeAccountDataSerializer()` without any argument instead. */
export function getRecipeAccountDataSerializer(
  _context: object
): Serializer<RecipeAccountDataArgs, RecipeAccountData>;
export function getRecipeAccountDataSerializer(): Serializer<
  RecipeAccountDataArgs,
  RecipeAccountData
>;
export function getRecipeAccountDataSerializer(
  _context: object = {}
): Serializer<RecipeAccountDataArgs, RecipeAccountData> {
  return mapSerializer<RecipeAccountDataArgs, any, RecipeAccountData>(
    struct<RecipeAccountData>(
      [
        ['key', getKeySerializer()],
        ['authority', publicKeySerializer()],
        ['status', getRecipeStatusSerializer()],
        ['totalCrafts', u64()],
        ['totalCraftsWithQuantity', u64()],
        ['fees', u64()],
        ['accumulatedAdminFees', u64()],
        ['accumulatedShards', u64()],
        ['accumulatedExperience', u64()],
        ['featureLevels', getFeatureLevelsSerializer()],
        ['inputs', array(getIngredientInputSerializer())],
        ['outputs', array(getIngredientOutputSerializer())],
      ],
      { description: 'RecipeAccountData' }
    ),
    (value) => ({ ...value, key: Key.Recipe })
  ) as Serializer<RecipeAccountDataArgs, RecipeAccountData>;
}

/** @deprecated Use `deserializeRecipe(rawAccount)` without any context instead. */
export function deserializeRecipe(
  context: object,
  rawAccount: RpcAccount
): Recipe;
export function deserializeRecipe(rawAccount: RpcAccount): Recipe;
export function deserializeRecipe(
  context: RpcAccount | object,
  rawAccount?: RpcAccount
): Recipe {
  return deserializeAccount(
    rawAccount ?? (context as RpcAccount),
    getRecipeAccountDataSerializer()
  );
}

export async function fetchRecipe(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Recipe> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Recipe');
  return deserializeRecipe(maybeAccount);
}

export async function safeFetchRecipe(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Recipe | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeRecipe(maybeAccount) : null;
}

export async function fetchAllRecipe(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Recipe[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Recipe');
    return deserializeRecipe(maybeAccount);
  });
}

export async function safeFetchAllRecipe(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Recipe[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeRecipe(maybeAccount as RpcAccount));
}

export function getRecipeGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'tokenRecipes',
    '6EgVKvZu2V6cpZzarvDHuyeJwa1NB2ujj8hXY98pQpLE'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      key: KeyArgs;
      authority: PublicKey;
      status: RecipeStatusArgs;
      totalCrafts: number | bigint;
      totalCraftsWithQuantity: number | bigint;
      fees: number | bigint;
      accumulatedAdminFees: number | bigint;
      accumulatedShards: number | bigint;
      accumulatedExperience: number | bigint;
      featureLevels: FeatureLevelsArgs;
      inputs: Array<IngredientInputArgs>;
      outputs: Array<IngredientOutputArgs>;
    }>({
      key: [0, getKeySerializer()],
      authority: [1, publicKeySerializer()],
      status: [33, getRecipeStatusSerializer()],
      totalCrafts: [34, u64()],
      totalCraftsWithQuantity: [42, u64()],
      fees: [50, u64()],
      accumulatedAdminFees: [58, u64()],
      accumulatedShards: [66, u64()],
      accumulatedExperience: [74, u64()],
      featureLevels: [82, getFeatureLevelsSerializer()],
      inputs: [92, array(getIngredientInputSerializer())],
      outputs: [null, array(getIngredientOutputSerializer())],
    })
    .deserializeUsing<Recipe>((account) => deserializeRecipe(account))
    .whereField('key', Key.Recipe);
}
