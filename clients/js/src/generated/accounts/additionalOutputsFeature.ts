/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  publicKey as publicKeySerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import { Key, KeyArgs, getKeySerializer } from '../types';

export type AdditionalOutputsFeature =
  Account<AdditionalOutputsFeatureAccountData>;

export type AdditionalOutputsFeatureAccountData = {
  key: Key;
  mintBurn1: PublicKey;
  mintBurn2: PublicKey;
  mintBurn3: PublicKey;
  mintSkill1: PublicKey;
  mintSkill2: PublicKey;
};

export type AdditionalOutputsFeatureAccountDataArgs = {
  key: KeyArgs;
  mintBurn1: PublicKey;
  mintBurn2: PublicKey;
  mintBurn3: PublicKey;
  mintSkill1: PublicKey;
  mintSkill2: PublicKey;
};

/** @deprecated Use `getAdditionalOutputsFeatureAccountDataSerializer()` without any argument instead. */
export function getAdditionalOutputsFeatureAccountDataSerializer(
  _context: object
): Serializer<
  AdditionalOutputsFeatureAccountDataArgs,
  AdditionalOutputsFeatureAccountData
>;
export function getAdditionalOutputsFeatureAccountDataSerializer(): Serializer<
  AdditionalOutputsFeatureAccountDataArgs,
  AdditionalOutputsFeatureAccountData
>;
export function getAdditionalOutputsFeatureAccountDataSerializer(
  _context: object = {}
): Serializer<
  AdditionalOutputsFeatureAccountDataArgs,
  AdditionalOutputsFeatureAccountData
> {
  return struct<AdditionalOutputsFeatureAccountData>(
    [
      ['key', getKeySerializer()],
      ['mintBurn1', publicKeySerializer()],
      ['mintBurn2', publicKeySerializer()],
      ['mintBurn3', publicKeySerializer()],
      ['mintSkill1', publicKeySerializer()],
      ['mintSkill2', publicKeySerializer()],
    ],
    { description: 'AdditionalOutputsFeatureAccountData' }
  ) as Serializer<
    AdditionalOutputsFeatureAccountDataArgs,
    AdditionalOutputsFeatureAccountData
  >;
}

/** @deprecated Use `deserializeAdditionalOutputsFeature(rawAccount)` without any context instead. */
export function deserializeAdditionalOutputsFeature(
  context: object,
  rawAccount: RpcAccount
): AdditionalOutputsFeature;
export function deserializeAdditionalOutputsFeature(
  rawAccount: RpcAccount
): AdditionalOutputsFeature;
export function deserializeAdditionalOutputsFeature(
  context: RpcAccount | object,
  rawAccount?: RpcAccount
): AdditionalOutputsFeature {
  return deserializeAccount(
    rawAccount ?? (context as RpcAccount),
    getAdditionalOutputsFeatureAccountDataSerializer()
  );
}

export async function fetchAdditionalOutputsFeature(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<AdditionalOutputsFeature> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'AdditionalOutputsFeature');
  return deserializeAdditionalOutputsFeature(maybeAccount);
}

export async function safeFetchAdditionalOutputsFeature(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<AdditionalOutputsFeature | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists
    ? deserializeAdditionalOutputsFeature(maybeAccount)
    : null;
}

export async function fetchAllAdditionalOutputsFeature(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<AdditionalOutputsFeature[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'AdditionalOutputsFeature');
    return deserializeAdditionalOutputsFeature(maybeAccount);
  });
}

export async function safeFetchAllAdditionalOutputsFeature(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<AdditionalOutputsFeature[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeAdditionalOutputsFeature(maybeAccount as RpcAccount)
    );
}

export function getAdditionalOutputsFeatureGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'tokenRecipes',
    '6EgVKvZu2V6cpZzarvDHuyeJwa1NB2ujj8hXY98pQpLE'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      key: KeyArgs;
      mintBurn1: PublicKey;
      mintBurn2: PublicKey;
      mintBurn3: PublicKey;
      mintSkill1: PublicKey;
      mintSkill2: PublicKey;
    }>({
      key: [0, getKeySerializer()],
      mintBurn1: [1, publicKeySerializer()],
      mintBurn2: [33, publicKeySerializer()],
      mintBurn3: [65, publicKeySerializer()],
      mintSkill1: [97, publicKeySerializer()],
      mintSkill2: [129, publicKeySerializer()],
    })
    .deserializeUsing<AdditionalOutputsFeature>((account) =>
      deserializeAdditionalOutputsFeature(account)
    );
}

export function getAdditionalOutputsFeatureSize(): number {
  return 161;
}
