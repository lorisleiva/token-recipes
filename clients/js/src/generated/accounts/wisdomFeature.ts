/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  publicKey as publicKeySerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import { Key, KeyArgs, getKeySerializer } from '../types';

export type WisdomFeature = Account<WisdomFeatureAccountData>;

export type WisdomFeatureAccountData = {
  key: Key;
  experienceMint: PublicKey;
  mintBurn1: PublicKey;
  mintBurn2: PublicKey;
};

export type WisdomFeatureAccountDataArgs = {
  key: KeyArgs;
  experienceMint: PublicKey;
  mintBurn1: PublicKey;
  mintBurn2: PublicKey;
};

/** @deprecated Use `getWisdomFeatureAccountDataSerializer()` without any argument instead. */
export function getWisdomFeatureAccountDataSerializer(
  _context: object
): Serializer<WisdomFeatureAccountDataArgs, WisdomFeatureAccountData>;
export function getWisdomFeatureAccountDataSerializer(): Serializer<
  WisdomFeatureAccountDataArgs,
  WisdomFeatureAccountData
>;
export function getWisdomFeatureAccountDataSerializer(
  _context: object = {}
): Serializer<WisdomFeatureAccountDataArgs, WisdomFeatureAccountData> {
  return struct<WisdomFeatureAccountData>(
    [
      ['key', getKeySerializer()],
      ['experienceMint', publicKeySerializer()],
      ['mintBurn1', publicKeySerializer()],
      ['mintBurn2', publicKeySerializer()],
    ],
    { description: 'WisdomFeatureAccountData' }
  ) as Serializer<WisdomFeatureAccountDataArgs, WisdomFeatureAccountData>;
}

/** @deprecated Use `deserializeWisdomFeature(rawAccount)` without any context instead. */
export function deserializeWisdomFeature(
  context: object,
  rawAccount: RpcAccount
): WisdomFeature;
export function deserializeWisdomFeature(rawAccount: RpcAccount): WisdomFeature;
export function deserializeWisdomFeature(
  context: RpcAccount | object,
  rawAccount?: RpcAccount
): WisdomFeature {
  return deserializeAccount(
    rawAccount ?? (context as RpcAccount),
    getWisdomFeatureAccountDataSerializer()
  );
}

export async function fetchWisdomFeature(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<WisdomFeature> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'WisdomFeature');
  return deserializeWisdomFeature(maybeAccount);
}

export async function safeFetchWisdomFeature(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<WisdomFeature | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeWisdomFeature(maybeAccount) : null;
}

export async function fetchAllWisdomFeature(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<WisdomFeature[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'WisdomFeature');
    return deserializeWisdomFeature(maybeAccount);
  });
}

export async function safeFetchAllWisdomFeature(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<WisdomFeature[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeWisdomFeature(maybeAccount as RpcAccount)
    );
}

export function getWisdomFeatureGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'tokenRecipes',
    '6EgVKvZu2V6cpZzarvDHuyeJwa1NB2ujj8hXY98pQpLE'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      key: KeyArgs;
      experienceMint: PublicKey;
      mintBurn1: PublicKey;
      mintBurn2: PublicKey;
    }>({
      key: [0, getKeySerializer()],
      experienceMint: [1, publicKeySerializer()],
      mintBurn1: [33, publicKeySerializer()],
      mintBurn2: [65, publicKeySerializer()],
    })
    .deserializeUsing<WisdomFeature>((account) =>
      deserializeWisdomFeature(account)
    );
}

export function getWisdomFeatureSize(): number {
  return 97;
}
