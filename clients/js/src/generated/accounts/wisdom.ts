/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  publicKey as publicKeySerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import { Key, KeyArgs, getKeySerializer } from '../types';

export type Wisdom = Account<WisdomAccountData>;

export type WisdomAccountData = {
  key: Key;
  experienceMint: PublicKey;
  mintBurn1: PublicKey;
  mintBurn2: PublicKey;
};

export type WisdomAccountDataArgs = {
  key: KeyArgs;
  experienceMint: PublicKey;
  mintBurn1: PublicKey;
  mintBurn2: PublicKey;
};

/** @deprecated Use `getWisdomAccountDataSerializer()` without any argument instead. */
export function getWisdomAccountDataSerializer(
  _context: object
): Serializer<WisdomAccountDataArgs, WisdomAccountData>;
export function getWisdomAccountDataSerializer(): Serializer<
  WisdomAccountDataArgs,
  WisdomAccountData
>;
export function getWisdomAccountDataSerializer(
  _context: object = {}
): Serializer<WisdomAccountDataArgs, WisdomAccountData> {
  return struct<WisdomAccountData>(
    [
      ['key', getKeySerializer()],
      ['experienceMint', publicKeySerializer()],
      ['mintBurn1', publicKeySerializer()],
      ['mintBurn2', publicKeySerializer()],
    ],
    { description: 'WisdomAccountData' }
  ) as Serializer<WisdomAccountDataArgs, WisdomAccountData>;
}

/** @deprecated Use `deserializeWisdom(rawAccount)` without any context instead. */
export function deserializeWisdom(
  context: object,
  rawAccount: RpcAccount
): Wisdom;
export function deserializeWisdom(rawAccount: RpcAccount): Wisdom;
export function deserializeWisdom(
  context: RpcAccount | object,
  rawAccount?: RpcAccount
): Wisdom {
  return deserializeAccount(
    rawAccount ?? (context as RpcAccount),
    getWisdomAccountDataSerializer()
  );
}

export async function fetchWisdom(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Wisdom> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Wisdom');
  return deserializeWisdom(maybeAccount);
}

export async function safeFetchWisdom(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Wisdom | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeWisdom(maybeAccount) : null;
}

export async function fetchAllWisdom(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Wisdom[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Wisdom');
    return deserializeWisdom(maybeAccount);
  });
}

export async function safeFetchAllWisdom(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Wisdom[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeWisdom(maybeAccount as RpcAccount));
}

export function getWisdomGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'tokenRecipes',
    '6EgVKvZu2V6cpZzarvDHuyeJwa1NB2ujj8hXY98pQpLE'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      key: KeyArgs;
      experienceMint: PublicKey;
      mintBurn1: PublicKey;
      mintBurn2: PublicKey;
    }>({
      key: [0, getKeySerializer()],
      experienceMint: [1, publicKeySerializer()],
      mintBurn1: [33, publicKeySerializer()],
      mintBurn2: [65, publicKeySerializer()],
    })
    .deserializeUsing<Wisdom>((account) => deserializeWisdom(account));
}

export function getWisdomSize(): number {
  return 97;
}
